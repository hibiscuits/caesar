#! /usr/local/bin/python3 ./caesar.py --run

@ffi("C")
extern fn printf(format: byte&, ...) -> int

@ffi("C")
extern fn scanf(format: byte&, ...) -> int

@ffi("C")
extern fn time(ret: int64&) -> int64

@ffi("C")
extern fn getchar() -> int

const NULL = 0 as int64&

fn doTheThing(n: int16) -> int16 #=hello=#
	printf("Normal function-call syntax%s\n", ".")
	"Here is a number: %d\n" -> printf(n)
	
	return 17

fn theMeaningOfLifeTheUniverseAndEverything() -> int16 { if true {-42} else {return 42} }

mod testMod
	fn otherFn() -> int { printf("enter a char: "), getchar() }

static myStatic = 17

#========================================================
	This is the documentation for the `main` function, 
	which is the entry point for the application
========================================================#
fn main()
	printf("a static value: %d\n", myStatic)
	
	moreThanSixArgs(5,6,7,8,9,10,11,12,-99999)
	
	let i: int = if true {42} else {return}
	let xyz: int8 = { printf("123\n"), 123 }
	
	doTheThing( doTheThing( theMeaningOfLifeTheUniverseAndEverything() ) )
	printf("The time is: %d\nAnd here is the value of a local variable: %d\n", time(NULL), xyz)
	
	let mut c: int = 
		if true
			testMod::otherFn()
		else
			"asdf", 3
	
	if c + 4 * 3 + 2 - 13 == 98
		printf("You typed the letter 'a'.\n")
	else if true
		printf("You did not type the letter 'a'. You typed '%c'\n", c + 
			10 * 2 - 11 * 2 + 2)
	
	let n: int = 0
	printf("count down from: ")
	scanf("%d", &n)
	
	let mut count = 0
	while count <= n
		let t = time(NULL)
		while time(NULL) == t
			void
		printf("%d\n", n-count)
		count = count+1
	
	printf("%c%c%c%c%c%c%c!!\n",
			103, 111, 111, 100,
			98, 121, 101)

fn moreThanSixArgs(
	a: int8, b: int, c: int, d: int
	e: int, f: int, g: int, h: int
	i: int)
	printf("%d %d %d %d %d %d %d %d %d\n", a, i, b, c, d, e, f, g, h)