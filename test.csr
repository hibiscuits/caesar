@FFI("C")
extern fn printf(format: Byte&, ...) -> Int32

@FFI("C")
extern fn scanf(format: Byte&, ...) -> Int32

@FFI("C")
extern fn time(ret: Int64&) -> Int64

@FFI("C")
extern fn getchar() -> Int32

fn doTheThing(n: Int16) -> Int16 #=hello=#
	printf("Normal function-call syntax%s\n", ".")
	"Here is a number: %d\n" -> printf(n)
	
	return 17

fn theMeaningOfLifeTheUniverseAndEverything() -> Int16 { if true {-42} else {return 42} }

mod testMod
	fn otherFn() -> Int32 { printf("enter a char: "), getchar() }

#========================================================
	This is the documentation for the `main` function, 
	which is the entry point for the application
========================================================#
fn main()
	moreThanSixArgs(5,6,7,8,9,10,11,12,-99999)
	
	let i: Int32 = if true {42} else {return}
	
	let null = 0 as Int64&
	let xyz: Int8 = { printf("123\n"), 123 }
	
	doTheThing( doTheThing( theMeaningOfLifeTheUniverseAndEverything() ) )
	printf("The time is: %d\nAnd here is the value of a local variable: %d\n", time(null), xyz)
	
	let mut c: Int32 = 
		if true
			testMod::otherFn()
		else
			"asdf", 3
	
	if c + 4 * 3 + 2 - 13 == 98
		printf("You typed the letter 'a'.\n")
	else if true
		printf("You did not type the letter 'a'. You typed '%c'\n", c + 
			10 * 2 - 11 * 2 + 2)
	
	let n: Int32
	printf("count down from: ")
	scanf("%d", n&)
	
	let mut count = 0
	while count <= n
		let t = time(null)
		while time(null) == t
			void
		printf("%d\n", n-count)
		count = count+1
	
	printf("%c%c%c%c%c%c%c!!\n",
			103, 111, 111, 100,
			98, 121, 101)

fn moreThanSixArgs(
	a: Int8, b: Int32, c: Int32, d: Int32, 
	e: Int32, f: Int32, g: Int32, h: Int32,
	i: Int32)
	printf("%d %d %d %d %d %d %d %d %d\n", a, i, b, c, d, e, f, g, h)